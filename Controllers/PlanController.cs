using FP.Manager;using FP.Models;using System;using System.Collections.Generic;using System.IO;using System.Linq;using System.Web;using System.Web.Mvc;using static FP.Manager.Enums;namespace FP.Controllers{    public class PlanController : Controller    {        FP_DBEntities db = new FP_DBEntities();        JsonResponseData response = new JsonResponseData();        int result = 0; bool CheckStatus = false;        string MSG = string.Empty;        public ActionResult Index()        {            return View();        }        public ActionResult CreatePlan(Guid? Id)        {            PlanModel model = new PlanModel();            if (Id != Guid.Empty)
            {
                var tbl = db.tbl_Plan.Find(Id);
                if (tbl != null)
                {
                    model.PlanID_pk = tbl.PlanID_pk;
                    model.DistrictId_fk = tbl.DistrictId_fk;
                    model.BlockId_fk = tbl.BlockId_fk;
                    model.PanchayatId_fk = tbl.PanchayatId_fk;
                    model.VoId_fk = tbl.VoId_fk;
                    model.PlanDt = tbl.PlanDt;
                    model.HVDt = tbl.HVDt;
                    model.IsBFY = tbl.IsBFY;
                    model.DOMDt = tbl.DOMDt;
                    model.DOMHVDt = tbl.DOMHVDt;
                    model.SubjectId = tbl.SubjectId;
                }
            }            return View(model);        }        [HttpPost]        public JsonResult CreatePlan(PlanModel model)        {            int res = 0;            try            {                FP_DBEntities _db = new FP_DBEntities();                JsonResponseData response = new JsonResponseData();                if (!ModelState.IsValid)                {                    var d = Enums.GetEnumDescription(Enums.eReturnReg.AllFieldsRequired);                    response = new JsonResponseData { StatusType = eAlertType.error.ToString(), Message = Enums.GetEnumDescription(Enums.eReturnReg.AllFieldsRequired), Data = null };                    var resResponse3 = Json(response, JsonRequestBehavior.AllowGet);                    resResponse3.MaxJsonLength = int.MaxValue;                    return resResponse3;                }                if (model != null)                {                    var tbl = model.PlanID_pk != Guid.Empty ? _db.tbl_Plan.Find(model.PlanID_pk) : new tbl_Plan();                    if (tbl != null)                    {                        tbl.PlanDt = model.PlanDt;                        tbl.HVDt = model.HVDt;                        tbl.IsBFY = model.IsBFY;                        tbl.DOMDt = ((model.IsBFY == 1 || model.IsBFY == 3) && model.DOMDt != null) ? model.DOMDt : null;                        tbl.DOMHVDt = ((model.IsBFY == 2 || model.IsBFY == 3) && model.DOMHVDt != null) ? model.DOMHVDt : null;                        tbl.SubjectId = model.SubjectId;                        tbl.IsActive = true;                        if (model.PlanID_pk == Guid.Empty)                        {                            tbl.PlanID_pk = Guid.NewGuid();                            tbl.DistrictId_fk = model.DistrictId_fk;                            tbl.BlockId_fk = model.BlockId_fk;                            tbl.PanchayatId_fk = model.PanchayatId_fk;                            tbl.VoId_fk = model.VoId_fk;                            tbl.CreatedBy = User.Identity.Name;                            tbl.CreatedOn = DateTime.Now;                            db.tbl_Plan.Add(tbl);                            res = db.SaveChanges();                        }                        else                        {                            tbl.UpdatedBy = User.Identity.Name;                            tbl.UpdatedOn = DateTime.Now;                            res += _db.SaveChanges();                        }                    }                    if (res > 0)                    {                        response = new JsonResponseData { StatusType = eAlertType.success.ToString(), Message = Enums.GetEnumDescription(Enums.eReturnReg.Insert), Data = null };                        var resResponse3 = Json(response, JsonRequestBehavior.AllowGet);                        resResponse3.MaxJsonLength = int.MaxValue;                        return resResponse3;                    }                }                else                {                    response = new JsonResponseData { StatusType = eAlertType.error.ToString(), Message = Enums.GetEnumDescription(Enums.eReturnReg.AllFieldsRequired), Data = null };                    var resResponse3 = Json(response, JsonRequestBehavior.AllowGet);                    resResponse3.MaxJsonLength = int.MaxValue;                    return resResponse3;                }            }            catch (Exception)            {                response = new JsonResponseData { StatusType = eAlertType.error.ToString(), Message = Enums.GetEnumDescription(Enums.eReturnReg.Error), Data = null };                var resResponse3 = Json(response, JsonRequestBehavior.AllowGet);                resResponse3.MaxJsonLength = int.MaxValue;                return resResponse3;            }            response = new JsonResponseData { StatusType = eAlertType.error.ToString(), Message = Enums.GetEnumDescription(Enums.eReturnReg.AllFieldsRequired), Data = null };            var resResponse4 = Json(response, JsonRequestBehavior.AllowGet);            resResponse4.MaxJsonLength = int.MaxValue;            return resResponse4;        }
        public PartialViewResult AchvpopForm()
        {
            AchBFYModel model = new AchBFYModel();
            //return PartialView("~/Views/ControllerName/PartalView.cshtml", model);
            return PartialView("_BFYPOP", model);
        }

        [HttpPost]        public JsonResult AddAchBFY(AchBFYModel model)        {            int res = 0;            try            {                FP_DBEntities _db = new FP_DBEntities();                JsonResponseData response = new JsonResponseData();                if (!ModelState.IsValid)                {                    var d = Enums.GetEnumDescription(Enums.eReturnReg.AllFieldsRequired);                    response = new JsonResponseData { StatusType = eAlertType.error.ToString(), Message = Enums.GetEnumDescription(Enums.eReturnReg.AllFieldsRequired), Data = null };                    var resResponse3 = Json(response, JsonRequestBehavior.AllowGet);                    resResponse3.MaxJsonLength = int.MaxValue;                    return resResponse3;                }                if (model != null)                {                    var tbl = model.AchvtBFYID_pk != Guid.Empty ? _db.tbl_Achvt.Find(model.AchvtBFYID_pk) : new tbl_Achvt();                    if (tbl != null)                    {                        tbl.IsPeerPresent = model.IsPeerPresent;                        tbl.IsFollowUpHV = model.IsFollowUpHV;                        tbl.IsContraception = model.IsContraception;                        tbl.ContraceptionId_fk = (model.IsContraception == true && model.ContraceptionId_fk != null) ? model.ContraceptionId_fk : null;                        tbl.ContraceptionOther = (model.IsContraception == true && model.ContraceptionId_fk == 4) ? model.ContraceptionOther : null;                        tbl.UseMethodId_fk = (model.IsContraception == true && model.ContraceptionId_fk != null && model.UseMethodId_fk != null) ? model.UseMethodId_fk : null;                        tbl.Location = model.Location;                        tbl.ServiceProvider = model.ServiceProvider;                        tbl.IsActive = true;                        if (model.AchvtBFYID_pk == Guid.Empty)                        {                            tbl.AchvtBFYID_pk = Guid.NewGuid();                            tbl.PlanId_fk = model.PlanId_fk;                            tbl.BFYId_fk = model.BFYId_fk;                            tbl.CreatedBy = MvcApplication.CUser.Id;                            tbl.CreatedOn = DateTime.Now;                            db.tbl_Achvt.Add(tbl);                            res = db.SaveChanges();                        }                        else                        {                            tbl.UpdatedBy = MvcApplication.CUser.Id;                            tbl.UpdatedOn = DateTime.Now;                            res += _db.SaveChanges();                        }                    }                    if (res > 0)                    {                        var AchModel = new AchBFYModel();                        var Achvmtpopmodal= ConvertViewToString("_BFYPOP", AchModel);                        response = new JsonResponseData { StatusType = eAlertType.success.ToString(), Message = Enums.GetEnumDescription(Enums.eReturnReg.Insert), Data = Achvmtpopmodal };                        var resResponse3 = Json(response, JsonRequestBehavior.AllowGet);                        resResponse3.MaxJsonLength = int.MaxValue;                        return resResponse3;                    }                }                else                {                    response = new JsonResponseData { StatusType = eAlertType.error.ToString(), Message = Enums.GetEnumDescription(Enums.eReturnReg.AllFieldsRequired), Data = null };                    var resResponse3 = Json(response, JsonRequestBehavior.AllowGet);                    resResponse3.MaxJsonLength = int.MaxValue;                    return resResponse3;                }            }            catch (Exception)            {                response = new JsonResponseData { StatusType = eAlertType.error.ToString(), Message = Enums.GetEnumDescription(Enums.eReturnReg.Error), Data = null };                var resResponse3 = Json(response, JsonRequestBehavior.AllowGet);                resResponse3.MaxJsonLength = int.MaxValue;                return resResponse3;            }            response = new JsonResponseData { StatusType = eAlertType.error.ToString(), Message = Enums.GetEnumDescription(Enums.eReturnReg.AllFieldsRequired), Data = null };            var resResponse4 = Json(response, JsonRequestBehavior.AllowGet);            resResponse4.MaxJsonLength = int.MaxValue;            return resResponse4;        }        public ActionResult GetPlanBFYList(FilterModel model)        {            try            {                bool IsCheck = false;                var tbllist = SP_Model.SPPlanBFYList(model);                if (tbllist.Rows.Count > 0)                {                    IsCheck = true;                }                var html = ConvertViewToString("_PlanBFYData", tbllist);                var res = Json(new { IsSuccess = IsCheck, Data = html }, JsonRequestBehavior.AllowGet);                res.MaxJsonLength = int.MaxValue;                return res;            }            catch (Exception ex)            {                string er = ex.Message;                return Json(new { IsSuccess = false, Data = "" }, JsonRequestBehavior.AllowGet);            }        }
        public ActionResult PlanList()
        {
            FilterModel model = new FilterModel();
            return View(model);
        }
        public ActionResult GetPlanList(FilterModel model)
        {
            try
            {
                bool IsCheck = false;
                var tbllist = SP_Model.SP_PlanList(model);
                if (tbllist.Rows.Count > 0)
                {
                    IsCheck = true;
                }
                var html = ConvertViewToString("_PlanData", tbllist);
                var res = Json(new { IsSuccess = IsCheck, Data = html }, JsonRequestBehavior.AllowGet);
                res.MaxJsonLength = int.MaxValue;
                return res;
            }
            catch (Exception ex)
            {
                string er = ex.Message;
                return Json(new { IsSuccess = false, Data = "" }, JsonRequestBehavior.AllowGet);
            }
        }        private string ConvertViewToString(string viewName, object model)        {            ViewData.Model = model;            using (StringWriter writer = new StringWriter())            {                ViewEngineResult vResult = ViewEngines.Engines.FindPartialView(ControllerContext, viewName);                ViewContext vContext = new ViewContext(this.ControllerContext, vResult.View, ViewData, new TempDataDictionary(), writer);                vResult.View.Render(vContext, writer);                return writer.ToString();            }        }    }}